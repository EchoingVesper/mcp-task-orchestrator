Metadata-Version: 2.4
Name: mcp-task-orchestrator
Version: 0.1.0
Summary: A Model Context Protocol server for task orchestration
Home-page: https://github.com/windsurf/mcp-task-orchestrator
Author: Windsurf Engineering Team
Author-email: example@example.com
Classifier: Development Status :: 4 - Beta
Classifier: Intended Audience :: Developers
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.8
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: mcp==1.4.0
Requires-Dist: pydantic>=2.0.0
Requires-Dist: jinja2>=3.1.0
Requires-Dist: pyyaml>=6.0.0
Requires-Dist: aiofiles>=23.0.0
Requires-Dist: pytest>=7.0.0
Requires-Dist: pytest-asyncio>=0.21.0
Dynamic: author
Dynamic: author-email
Dynamic: classifier
Dynamic: description
Dynamic: description-content-type
Dynamic: home-page
Dynamic: license-file
Dynamic: requires-dist
Dynamic: requires-python
Dynamic: summary

# MCP Task Orchestrator

[![License: MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://opensource.org/licenses/MIT)
[![Python 3.8+](https://img.shields.io/badge/python-3.8+-blue.svg)](https://www.python.org/downloads/)

A Model Context Protocol (MCP) server that provides task orchestration capabilities similar to Roo Code's Orchestrator mode, but optimized for single-session LLM interactions.

## Overview

The MCP Task Orchestrator enables complex task management and specialized prompting within any MCP-compatible environment (Claude Desktop, Windsurf, Cursor, etc.). Instead of spawning multiple LLM instances like Roo Code, it uses dynamic prompt injection and state management to provide specialist capabilities within a single session.

## Key Features

- **Task Decomposition**: Automatically breaks down complex requests into manageable subtasks
- **Specialist Modes**: Provides role-specific prompts for different types of work:
  - üèóÔ∏è **Architect**: System design and architecture planning
  - üíª **Implementer**: Code writing and feature development
  - üêõ **Debugger**: Error analysis and troubleshooting
  - üìù **Documenter**: Documentation and explanation writing
  - üîç **Reviewer**: Code review and quality assurance
  - üî¨ **Researcher**: Information gathering and analysis
- **State Management**: Tracks task progress, dependencies, and results
- **Context Isolation**: Manages context switching between specialist modes
- **Cost Optimization**: Works within flat-rate LLM subscriptions (no per-token charges)
- **Cross-Platform Support**: Works on Windows, macOS, and Linux
- **Automatic Configuration**: Detects and configures MCP clients automatically

## Installation

### Quick Install

#### Windows
```powershell
# Clone the repository
git clone https://github.com/windsurf/mcp-task-orchestrator.git
cd mcp-task-orchestrator

# Run the installation script (requires administrator privileges)
.\scripts\install.ps1
```

#### macOS/Linux
```bash
# Clone the repository
git clone https://github.com/windsurf/mcp-task-orchestrator.git
cd mcp-task-orchestrator

# Run the installation script
chmod +x ./scripts/install.sh
./scripts/install.sh
```

### Manual Installation

```bash
# Clone the repository
git clone https://github.com/windsurf/mcp-task-orchestrator.git
cd mcp-task-orchestrator

# Install the package
pip install -e .

# Configure MCP clients
python -m mcp_task_orchestrator_cli.cli install ./mcp_task_orchestrator/server.py
```## Usage

Once installed, the MCP Task Orchestrator will be available in your MCP-compatible clients (Claude Desktop, Windsurf, Cursor, etc.). The following tools will be available:

- `orchestrator_plan_task` - Break down complex tasks into specialized subtasks
- `orchestrator_execute_subtask` - Get specialist context for a specific subtask
- `orchestrator_complete_subtask` - Mark a subtask as complete and record results
- `orchestrator_synthesize_results` - Combine results from completed subtasks
- `orchestrator_get_status` - Check the status of all active tasks

### Example: Complex Development Task

```
User: "Build a web scraper for e-commerce prices with error handling, data export, and monitoring"

LLM: *calls orchestrator_plan_task*
Server: *returns breakdown into architecture, implementation, error handling, export, and monitoring subtasks*

LLM: *executes each subtask with specialist prompts*
Result: Complete, well-architected scraper system
```

### Example: Code Review and Optimization

```
User: "Review this codebase and suggest performance improvements"

LLM: *calls orchestrator_plan_task*
Server: *breaks into review, analysis, and optimization subtasks*

LLM: *specialist reviewer analyzes code quality*
LLM: *specialist debugger identifies performance issues*
LMM: *specialist implementer suggests specific improvements*
```

## Configuration

The MCP Task Orchestrator is automatically configured during installation. If you need to manually configure it or update the configuration, you can use the CLI:

```bash
# Configure all detected MCP clients
python -m mcp_task_orchestrator_cli.cli install <path_to_server.py>

# Configure specific clients
python -m mcp_task_orchestrator_cli.cli install <path_to_server.py> --client claude_desktop --client vscode

# Update configuration with a new server path
python -m mcp_task_orchestrator_cli.cli update <new_path_to_server.py>

# Remove configuration
python -m mcp_task_orchestrator_cli.cli uninstall --all
```## Supported MCP Clients

The MCP Task Orchestrator supports the following MCP clients:

- **Claude Desktop**: Automatically configures Claude Desktop to use the Task Orchestrator
- **Windsurf**: Adds the Task Orchestrator to Windsurf's MCP server list
- **Cursor**: Configures Cursor to use the Task Orchestrator
- **VS Code**: Configures VS Code MCP extensions to use the Task Orchestrator

## Architecture

- **MCP Server**: Python-based server implementing the Model Context Protocol
- **State Store**: SQLite database for persistent task and progress tracking
- **Prompt Templates**: Jinja2 templates for specialist role definitions
- **Orchestration Engine**: Logic for task breakdown and dependency management
- **Configuration Manager**: Cross-platform configuration for MCP clients

## Comparison to Roo Code

| Feature | Roo Code | MCP Task Orchestrator |
|---------|----------|----------------------|
| **Cost Model** | Per-token API charges | Flat-rate subscription compatible |
| **Context Management** | Separate LLM instances | Single session with dynamic prompting |
| **Platform Support** | VS Code extension | Any MCP-compatible client |
| **Customization** | Built-in + custom modes | Fully customizable specialist templates |
| **State Persistence** | Session-based | Database-backed |

## Contributing

Contributions are welcome! Please feel free to submit a Pull Request.

1. Fork the repository
2. Create your feature branch (`git checkout -b feature/amazing-feature`)
3. Commit your changes (`git commit -m 'Add some amazing feature'`)
4. Push to the branch (`git push origin feature/amazing-feature`)
5. Open a Pull Request

Please make sure your code follows the project's coding style and includes appropriate tests.

## License

Distributed under the MIT License. See `LICENSE` for more information.

## Acknowledgements

- [Model Context Protocol (MCP)](https://github.com/anthropics/model-context-protocol)
- [Claude Desktop](https://claude.ai/desktop)
- [Windsurf](https://windsurf.io)
- [Cursor](https://cursor.sh)

---

Built with ‚ù§Ô∏è by the Windsurf Engineering Team
