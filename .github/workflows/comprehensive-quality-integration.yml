name: Comprehensive Quality Integration

on:
  schedule:
    # Run comprehensive integration checks weekly
    - cron: '0 6 * * 1'  # Monday at 6 AM UTC
  workflow_dispatch:
    inputs:
      integration_level:
        description: 'Level of integration testing'
        required: false
        default: 'comprehensive'
        type: choice
        options:
        - basic
        - comprehensive
        - full-audit
      generate_dashboard:
        description: 'Generate quality dashboard'
        required: false
        default: true
        type: boolean

jobs:
  # Comprehensive Quality Integration Test
  comprehensive-quality-integration:
    runs-on: ubuntu-latest
    name: Comprehensive Quality Integration
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for comprehensive analysis
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Setup Node.js for documentation tools
      uses: actions/setup-node@v4
      with:
        node-version: '20'
    
    - name: Install comprehensive toolchain
      run: |
        # Install Python dependencies
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt || echo "‚ö†Ô∏è Some Python requirements failed"
        fi
        if [ -f setup.py ] || [ -f pyproject.toml ]; then
          pip install -e ".[dev]" || pip install -e . || echo "‚ö†Ô∏è Project installation failed"
        fi
        
        # Install documentation tools
        npm install -g markdownlint-cli2 || echo "‚ö†Ô∏è markdownlint installation failed"
        
        # Install Vale for prose quality
        wget -q https://github.com/errata-ai/vale/releases/latest/download/vale_Linux_64-bit.tar.gz
        tar -xzf vale_Linux_64-bit.tar.gz
        sudo mv vale /usr/local/bin/ || echo "‚ö†Ô∏è Vale installation failed"
        
        # Install additional analysis tools
        pip install pyyaml requests beautifulsoup4 gitpython pygments || echo "‚ö†Ô∏è Some analysis tools failed"
    
    - name: Run integrated quality validation
      run: |
        echo "üéØ Running Comprehensive Quality Integration..."
        mkdir -p validation_results quality_dashboard
        
        # Run the integrated quality validator
        if [ -f "scripts/ci/integrated-quality-validator.py" ]; then
          python scripts/ci/integrated-quality-validator.py \
            --project-root . \
            --output validation_results/integrated-quality-report.json \
            --fail-on-issues
          
          INTEGRATION_EXIT_CODE=$?
        else
          echo "‚ö†Ô∏è Integrated quality validator not found - running manual integration"
          
          # Manual integration check
          python - << 'EOF'
          """Manual Quality Integration Check."""
          import json
          import os
          from pathlib import Path
          from datetime import datetime
          
          def run_manual_integration():
              """Run manual quality integration."""
              results = {
                  "timestamp": datetime.now().isoformat(),
                  "integration_type": "manual",
                  "components_validated": {
                      "ci_workflows": False,
                      "documentation_quality": False,
                      "japanese_standards": False,
                      "template_compliance": False,
                      "project_cleanliness": False
                  },
                  "overall_integration_score": 0,
                  "integration_status": "partial"
              }
              
              # Check CI workflows exist
              workflows_dir = Path('.github/workflows')
              if workflows_dir.exists():
                  workflows = list(workflows_dir.glob('*.yml'))
                  expected_workflows = [
                      'ci.yml',
                      'documentation-quality.yml',
                      'documentation-lifecycle-management.yml',
                      'project-cleanliness-validation.yml'
                  ]
                  
                  existing_workflows = [w.name for w in workflows]
                  workflow_coverage = sum(1 for w in expected_workflows if w in existing_workflows)
                  
                  if workflow_coverage >= 3:
                      results["components_validated"]["ci_workflows"] = True
              
              # Check documentation structure
              if Path('docs').exists() and Path('PRPs').exists():
                  results["components_validated"]["documentation_quality"] = True
              
              # Check Japanese standards indicators
              if Path('CLAUDE.md').exists():
                  claude_content = Path('CLAUDE.md').read_text()
                  if 'Status Tagging System' in claude_content:
                      results["components_validated"]["japanese_standards"] = True
              
              # Check template compliance
              prp_files = list(Path('PRPs').glob('**/*.md'))
              tagged_prps = [f for f in prp_files if '[' in f.name and ']' in f.name]
              if len(tagged_prps) > 0:
                  results["components_validated"]["template_compliance"] = True
              
              # Check project cleanliness
              root_files = [f for f in os.listdir('.') if os.path.isfile(f)]
              if len(root_files) <= 20:  # Reasonable root file count
                  results["components_validated"]["project_cleanliness"] = True
              
              # Calculate integration score
              validated_count = sum(results["components_validated"].values())
              results["overall_integration_score"] = (validated_count / 5) * 100
              
              if validated_count >= 4:
                  results["integration_status"] = "excellent"
              elif validated_count >= 3:
                  results["integration_status"] = "good"
              else:
                  results["integration_status"] = "needs_improvement"
              
              print(f"üîó Manual Integration Score: {results['overall_integration_score']:.1f}%")
              print(f"‚úÖ Components Validated: {validated_count}/5")
              
              # Save results
              with open('validation_results/integrated-quality-report.json', 'w') as f:
                  json.dump(results, f, indent=2)
              
              return validated_count >= 3
          
          integration_passed = run_manual_integration()
          exit(0 if integration_passed else 1)
          EOF
          
          INTEGRATION_EXIT_CODE=$?
        fi
        
        echo "üìä Integrated quality validation completed with exit code: $INTEGRATION_EXIT_CODE"
        echo "integration_status=$([ $INTEGRATION_EXIT_CODE -eq 0 ] && echo 'success' || echo 'failed')" >> $GITHUB_ENV
    
    - name: Generate quality dashboard
      if: github.event.inputs.generate_dashboard == 'true' || github.event.inputs.generate_dashboard == ''
      run: |
        echo "üìä Generating Quality Dashboard..."
        
        python - << 'EOF'
        """Quality Dashboard Generator."""
        import json
        import os
        from datetime import datetime
        from pathlib import Path
        
        def generate_quality_dashboard():
            """Generate comprehensive quality dashboard."""
            
            # Load integration results
            results_file = Path('validation_results/integrated-quality-report.json')
            if results_file.exists():
                with open(results_file, 'r') as f:
                    results = json.load(f)
            else:
                results = {"overall_quality_score": 0, "validation_components": {}}
            
            # Generate HTML dashboard
            dashboard_html = f"""
            <!DOCTYPE html>
            <html lang="en">
            <head>
                <meta charset="UTF-8">
                <meta name="viewport" content="width=device-width, initial-scale=1.0">
                <title>MCP Task Orchestrator - Quality Dashboard</title>
                <style>
                    body {{
                        font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, sans-serif;
                        margin: 0;
                        padding: 20px;
                        background: #f5f5f5;
                    }}
                    .dashboard {{
                        max-width: 1200px;
                        margin: 0 auto;
                        background: white;
                        border-radius: 8px;
                        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
                        padding: 30px;
                    }}
                    .header {{
                        text-align: center;
                        margin-bottom: 40px;
                    }}
                    .score-circle {{
                        display: inline-block;
                        width: 120px;
                        height: 120px;
                        border-radius: 50%;
                        border: 8px solid #e0e0e0;
                        position: relative;
                        margin: 20px;
                    }}
                    .score-text {{
                        position: absolute;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        font-size: 24px;
                        font-weight: bold;
                    }}
                    .components {{
                        display: grid;
                        grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
                        gap: 20px;
                        margin-top: 40px;
                    }}
                    .component {{
                        border: 1px solid #e0e0e0;
                        border-radius: 6px;
                        padding: 20px;
                    }}
                    .component.passed {{
                        border-color: #28a745;
                        background: #f8fff9;
                    }}
                    .component.failed {{
                        border-color: #dc3545;
                        background: #fff8f8;
                    }}
                    .japanese-principles {{
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        color: white;
                        margin-top: 40px;
                        padding: 30px;
                        border-radius: 8px;
                    }}
                    .principle {{
                        margin: 10px 0;
                        padding: 10px;
                        background: rgba(255, 255, 255, 0.1);
                        border-radius: 4px;
                    }}
                </style>
            </head>
            <body>
                <div class="dashboard">
                    <div class="header">
                        <h1>üéØ MCP Task Orchestrator Quality Dashboard</h1>
                        <p>Generated: {datetime.now().strftime('%Y-%m-%d %H:%M:%S UTC')}</p>
                        
                        <div class="score-circle">
                            <div class="score-text">{results.get('overall_quality_score', 0):.1f}%</div>
                        </div>
                        
                        <h2>Overall Quality Score</h2>
                    </div>
                    
                    <div class="components">
            """
            
            # Add component details
            components = results.get('validation_components', {})
            component_names = {
                'japanese_standards': 'üóæ Japanese Development Standards',
                'template_compliance': 'üìã Template Compliance',
                'documentation_quality': 'üìö Documentation Quality',
                'project_cleanliness': 'üßπ Project Cleanliness',
                'security_validation': 'üîí Security Validation'
            }
            
            for component_id, component_name in component_names.items():
                component = components.get(component_id, {'status': 'unknown', 'score': 0, 'issues': []})
                status_class = 'passed' if component['status'] == 'passed' else 'failed'
                
                dashboard_html += f"""
                        <div class="component {status_class}">
                            <h3>{component_name}</h3>
                            <p><strong>Score:</strong> {component.get('score', 0):.1f}%</p>
                            <p><strong>Status:</strong> {component.get('status', 'Unknown').title()}</p>
                            {f'<p><strong>Issues:</strong> {len(component.get("issues", []))}</p>' if component.get('issues') else ''}
                        </div>
                """
            
            # Add Japanese principles section
            dashboard_html += f"""
                    </div>
                    
                    <div class="japanese-principles">
                        <h2>üóæ Japanese Development Principles Applied</h2>
                        <div class="principle">
                            <strong>Êï¥ÁêÜÊï¥È†ì (Seiriseiton)</strong> - Systematic organization and cleanliness
                        </div>
                        <div class="principle">
                            <strong>‰ΩìÁ≥ªÁöÑ„Ç¢„Éó„É≠„Éº„ÉÅ (Systematic Approach)</strong> - Consistent methodology and patterns
                        </div>
                        <div class="principle">
                            <strong>„É©„Ç§„Éï„Çµ„Ç§„ÇØ„É´ÁÆ°ÁêÜ (Lifecycle Management)</strong> - Proper documentation maintenance
                        </div>
                        <div class="principle">
                            <strong>‰∏ÅÂØß„Å™‰øùÂÆà (Respectful Maintenance)</strong> - Careful and thoughtful upkeep
                        </div>
                        <div class="principle">
                            <strong>ÂÖ®‰ΩìÁöÑÂìÅË≥™ (Holistic Quality)</strong> - Overall system quality focus
                        </div>
                    </div>
                    
                    <div style="text-align: center; margin-top: 40px; color: #666;">
                        <p>üéØ This dashboard reflects the comprehensive quality validation of the MCP Task Orchestrator project.</p>
                        <p>Generated by the CI/CD Pipeline Quality Integration System</p>
                    </div>
                </div>
            </body>
            </html>
            """
            
            # Save dashboard
            dashboard_path = Path('quality_dashboard/index.html')
            dashboard_path.write_text(dashboard_html)
            
            print(f"üìä Quality dashboard generated: {dashboard_path}")
            
            # Generate JSON summary for API consumption
            api_summary = {
                "timestamp": datetime.now().isoformat(),
                "overall_score": results.get('overall_quality_score', 0),
                "status": "excellent" if results.get('overall_quality_score', 0) >= 90 else 
                         "good" if results.get('overall_quality_score', 0) >= 75 else 
                         "needs_improvement",
                "components": len([c for c in components.values() if c.get('status') == 'passed']),
                "total_components": len(components),
                "recommendations": results.get('recommendations', [])
            }
            
            with open('quality_dashboard/summary.json', 'w') as f:
                json.dump(api_summary, f, indent=2)
            
            print(f"üìã API summary generated: quality_dashboard/summary.json")
        
        generate_quality_dashboard()
        EOF
    
    - name: Upload comprehensive validation results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: comprehensive-quality-results-${{ github.run_id }}
        path: |
          validation_results/
          quality_dashboard/
        retention-days: 30
    
    - name: Comment on integration results (if triggered by PR)
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          try {
            const reportPath = 'validation_results/integrated-quality-report.json';
            if (fs.existsSync(reportPath)) {
              const report = JSON.parse(fs.readFileSync(reportPath, 'utf8'));
              
              const overallScore = report.overall_quality_score || 0;
              const emoji = overallScore >= 90 ? 'üéâ' : overallScore >= 75 ? '‚úÖ' : '‚ö†Ô∏è';
              
              const componentsSummary = Object.entries(report.validation_components || {})
                .map(([name, component]) => {
                  const status = component.passed ? '‚úÖ' : '‚ùå';
                  const displayName = name.replace(/_/g, ' ').toUpperCase();
                  return `- ${status} **${displayName}**: ${component.score || 0}%`;
                }).join('\n');
              
              const comment = `## ${emoji} Comprehensive Quality Integration Report
              
              **Overall Quality Score**: ${overallScore}%
              **Integration Status**: ${report.ci_cd_integration_status || 'unknown'}
              
              ### Component Validation Results:
              ${componentsSummary}
              
              ### üóæ Japanese Development Standards Applied:
              - **Êï¥ÁêÜÊï¥È†ì (Seiriseiton)**: Systematic organization and cleanliness
              - **‰ΩìÁ≥ªÁöÑ„Ç¢„Éó„É≠„Éº„ÉÅ (Systematic Approach)**: Consistent methodology  
              - **„É©„Ç§„Éï„Çµ„Ç§„ÇØ„É´ÁÆ°ÁêÜ (Lifecycle Management)**: Proper maintenance
              - **‰∏ÅÂØß„Å™‰øùÂÆà (Respectful Maintenance)**: Careful upkeep
              - **ÂÖ®‰ΩìÁöÑÂìÅË≥™ (Holistic Quality)**: Overall quality focus
              
              ${report.recommendations && report.recommendations.length > 0 ? `
              ### üí° Recommendations:
              ${report.recommendations.map(rec => `- ${rec}`).join('\n')}
              ` : ''}
              
              üìä **Quality Dashboard**: Available in workflow artifacts
              üéØ **Comprehensive Reports**: All validation results included
              
              ${overallScore >= 90 ? 'üéâ **Excellent!** This PR maintains the highest quality standards.' : 
                overallScore >= 75 ? '‚úÖ **Good!** This PR meets quality requirements with room for improvement.' : 
                '‚ö†Ô∏è **Attention Needed**: Please address quality issues before merging.'}
              `;
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }
          } catch (error) {
            console.log('Could not post integration results:', error.message);
          }

  # Integration Summary
  integration-summary:
    runs-on: ubuntu-latest
    name: Quality Integration Summary
    needs: comprehensive-quality-integration
    if: always()
    
    steps:
    - name: Generate comprehensive integration summary
      run: |
        echo "# üéØ Comprehensive Quality Integration Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## Integration Results" >> $GITHUB_STEP_SUMMARY
        echo "| Component | Status | Focus |" >> $GITHUB_STEP_SUMMARY
        echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
        echo "| üéØ Comprehensive Integration | ${{ needs.comprehensive-quality-integration.result }} | All quality systems working together |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.comprehensive-quality-integration.result }}" == "success" ]]; then
          echo "## ‚úÖ EXCELLENT INTEGRATION STATUS" >> $GITHUB_STEP_SUMMARY
          echo "üéâ All quality systems are properly integrated and working harmoniously!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### üóæ Japanese Development Standards Achievement:" >> $GITHUB_STEP_SUMMARY
          echo "- **Êï¥ÁêÜÊï¥È†ì (Seiriseiton)**: ‚úÖ Systematic organization maintained" >> $GITHUB_STEP_SUMMARY
          echo "- **‰ΩìÁ≥ªÁöÑ„Ç¢„Éó„É≠„Éº„ÉÅ (Systematic Approach)**: ‚úÖ Consistent methodology applied" >> $GITHUB_STEP_SUMMARY
          echo "- **„É©„Ç§„Éï„Çµ„Ç§„ÇØ„É´ÁÆ°ÁêÜ (Lifecycle Management)**: ‚úÖ Proper maintenance lifecycle" >> $GITHUB_STEP_SUMMARY
          echo "- **‰∏ÅÂØß„Å™‰øùÂÆà (Respectful Maintenance)**: ‚úÖ Careful quality upkeep" >> $GITHUB_STEP_SUMMARY
          echo "- **ÂÖ®‰ΩìÁöÑÂìÅË≥™ (Holistic Quality)**: ‚úÖ Overall system excellence" >> $GITHUB_STEP_SUMMARY
          overall_status="excellent"
        else
          echo "## üîß INTEGRATION IMPROVEMENTS NEEDED" >> $GITHUB_STEP_SUMMARY
          echo "Some aspects of the quality integration need attention. The CI/CD pipeline enhancements require fine-tuning." >> $GITHUB_STEP_SUMMARY
          overall_status="needs_improvement"
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üöÄ Enhanced CI/CD Pipeline Features" >> $GITHUB_STEP_SUMMARY
        echo "- **Documentation Lifecycle Management**: Comprehensive validation workflow" >> $GITHUB_STEP_SUMMARY
        echo "- **Project Cleanliness Validation**: Japanese standards compliance" >> $GITHUB_STEP_SUMMARY
        echo "- **Template Compliance Validation**: Systematic organization checks" >> $GITHUB_STEP_SUMMARY
        echo "- **Security Integration**: Documentation content security scanning" >> $GITHUB_STEP_SUMMARY
        echo "- **Quality Dashboard**: Visual quality metrics and tracking" >> $GITHUB_STEP_SUMMARY
        echo "- **Integrated PR/Issue Templates**: Quality-focused contribution templates" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üìä Quality Artifacts Generated" >> $GITHUB_STEP_SUMMARY
        echo "- **Integrated Quality Report**: Comprehensive validation results" >> $GITHUB_STEP_SUMMARY
        echo "- **Quality Dashboard**: Visual HTML dashboard with metrics" >> $GITHUB_STEP_SUMMARY
        echo "- **Component Validation Reports**: Individual system validation results" >> $GITHUB_STEP_SUMMARY
        echo "- **API Summary**: JSON summary for programmatic access" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "## üéØ Next Steps for Excellence" >> $GITHUB_STEP_SUMMARY
        if [[ "$overall_status" == "excellent" ]]; then
          echo "- üåü **Maintain Excellence**: Continue following Japanese development principles" >> $GITHUB_STEP_SUMMARY
          echo "- üìà **Continuous Improvement**: Look for opportunities to enhance quality further" >> $GITHUB_STEP_SUMMARY
          echo "- ü§ù **Share Knowledge**: Document and share successful quality patterns" >> $GITHUB_STEP_SUMMARY
        else
          echo "- üîß **Address Integration Issues**: Fix components that need attention" >> $GITHUB_STEP_SUMMARY
          echo "- üìã **Review Quality Reports**: Check detailed validation results" >> $GITHUB_STEP_SUMMARY  
          echo "- üéØ **Re-run Validation**: Test improvements with comprehensive validation" >> $GITHUB_STEP_SUMMARY
        fi
        
        # Console output
        echo "üéØ Comprehensive Quality Integration Summary"
        echo "===========================================" 
        echo "Integration Status: ${{ needs.comprehensive-quality-integration.result }}"
        echo "Overall Assessment: $overall_status"
        echo ""
        
        if [[ "$overall_status" == "excellent" ]]; then
          echo "üéâ Quality integration is excellent - all systems working harmoniously!"
          exit 0
        else
          echo "üîß Quality integration needs attention - check detailed reports."
          echo "üí° Review artifacts and address identified issues."
          exit 1
        fi