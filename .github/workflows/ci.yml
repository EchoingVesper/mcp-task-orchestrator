name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10", "3.11"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install wheel setuptools
        # Install the project in development mode
        pip install -e .
        # Install additional testing and linting tools
        pip install pytest pytest-cov pytest-asyncio flake8 black
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings, excluding __pycache__ and .git
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics --exclude=__pycache__,.git
    
    - name: Check code formatting with black
      run: |
        black --check --diff --exclude="/(\.git|__pycache__|\.pytest_cache|venv|build|dist)/" .
    
    - name: Test with pytest
      run: |
        # Run tests if they exist, otherwise skip
        if [ -d "tests" ]; then
          python -m pytest tests/ -v --cov=mcp_task_orchestrator --cov-report=xml --cov-report=term
        else
          echo "No tests directory found, creating a basic import test"
          python -c "
try:
    import mcp_task_orchestrator
    print('✅ Package imports successfully')
except ImportError as e:
    print(f'❌ Import failed: {e}')
    exit(1)
"
        fi
    
    - name: Upload coverage to Codecov
      if: matrix.python-version == '3.10' && github.event_name == 'pull_request'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Install security scanning tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit[toml]
    
    - name: Run safety check
      run: |
        echo "Running safety check for known security vulnerabilities..."
        safety check --json || echo "Safety check completed with warnings"
    
    - name: Run bandit security scan
      run: |
        echo "Running bandit security scan..."
        bandit -r mcp_task_orchestrator/ -f json || echo "Bandit scan completed with warnings"

  validate-project:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Validate project structure
      run: |
        echo "🔍 Validating project structure..."
        
        # Check for required files
        required_files=("README.md" "LICENSE" "setup.py" "requirements.txt")
        for file in "${required_files[@]}"; do
          if [ -f "$file" ]; then
            echo "✅ Found: $file"
          else
            echo "❌ Missing: $file"
          fi
        done
        
        # Check main package directory
        if [ -d "mcp_task_orchestrator" ]; then
          echo "✅ Found: mcp_task_orchestrator/ package directory"
        else
          echo "❌ Missing: mcp_task_orchestrator/ package directory"
        fi
        
        # Validate Python syntax in main package
        echo "🐍 Checking Python syntax..."
        python -m py_compile mcp_task_orchestrator/*.py 2>/dev/null && echo "✅ Python syntax validation passed" || echo "⚠️  Some Python files may have syntax issues"
        
        # Check if setup.py is valid
        echo "📦 Validating setup.py..."
        python setup.py check || echo "⚠️  Setup.py validation completed with warnings"
        
        echo "✅ Project structure validation complete"

  build-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Test package build
      run: |
        python -m pip install --upgrade pip build
        echo "🔨 Testing package build..."
        python -m build
        echo "✅ Package build successful"
    
    - name: Test installation
      run: |
        echo "📦 Testing package installation..."
        pip install dist/*.whl
        echo "✅ Package installation successful"
