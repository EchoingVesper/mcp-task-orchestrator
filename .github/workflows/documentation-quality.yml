name: Documentation Quality Gates

on:
  push:
    branches: [main, develop]
    paths: 
      - 'docs/**'
      - '*.md'
      - '.markdownlint.json'
      - '.vale.ini'
      - 'scripts/quality_automation.py'
      - 'scripts/fix_markdown_lint.py'
  pull_request:
    branches: [main, develop]
    paths:
      - 'docs/**'
      - '*.md'
      - '.markdownlint.json'
      - '.vale.ini'
      - 'scripts/quality_automation.py'
      - 'scripts/fix_markdown_lint.py'

jobs:
  # Enhanced Documentation Quality with Multi-Stage Integration
  documentation-quality:
    runs-on: ubuntu-latest
    name: Enhanced Documentation Quality
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Setup Node.js for markdownlint
      uses: actions/setup-node@v4
      with:
        node-version: '20'  # Updated to Node 20 LTS
        
    - name: Install documentation tools
      run: |
        # Install markdownlint
        npm install -g markdownlint-cli2
        
        # Install Vale
        wget https://github.com/errata-ai/vale/releases/latest/download/vale_Linux_64-bit.tar.gz
        tar -xzf vale_Linux_64-bit.tar.gz
        sudo mv vale /usr/local/bin/
        vale --version
        
        # Install Python dependencies for quality automation
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt || echo "‚ö†Ô∏è Some requirements failed to install"
        fi
        
        # Install project dependencies
        if [ -f setup.py ] || [ -f pyproject.toml ]; then
          pip install -e ".[dev]" || pip install -e . || echo "‚ö†Ô∏è Project installation failed"
        fi
        
    - name: Setup Vale styles and configuration
      run: |
        # Setup Vale styles
        if [ -f .vale.ini ]; then
          vale sync || echo "‚ö†Ô∏è Vale sync completed with warnings"
        else
          echo "‚ö†Ô∏è No Vale configuration found"
        fi
        
    - name: Run enhanced documentation quality checks
      run: |
        echo "üìö Running enhanced documentation quality checks..."
        
        # Check if quality automation script exists
        if [ -f "scripts/quality_automation.py" ]; then
          python scripts/quality_automation.py --check all --report validation_results/documentation_quality_report.json || echo "‚ö†Ô∏è Quality automation completed with issues"
        else
          echo "‚ö†Ô∏è Quality automation script not found - running manual checks"
          
          # Manual markdownlint check
          if command -v markdownlint-cli2 &> /dev/null; then
            markdownlint-cli2 "docs/**/*.md" "*.md" || echo "‚ö†Ô∏è Markdownlint found issues"
          fi
          
          # Manual Vale check
          if command -v vale &> /dev/null && [ -f .vale.ini ]; then
            vale docs/ || echo "‚ö†Ô∏è Vale found issues"
          fi
        fi
        
    - name: Run documentation validation stage from multi-stage pipeline
      run: |
        echo "üîç Running documentation validation from multi-stage pipeline..."
        if [ -f "tools/validation/stage_1_syntax.py" ]; then
          python -m tools.validation.stage_1_syntax --mode documentation || echo "‚ö†Ô∏è Documentation syntax validation completed with issues"
        fi
        
    - name: Upload enhanced quality reports
      uses: actions/upload-artifact@v4  # Updated to v4
      if: always()
      with:
        name: documentation-quality-reports-${{ github.run_id }}
        path: |
          validation_results/
          quality_report.json
        retention-days: 30
        
    - name: Comment PR with enhanced results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7  # Updated to v7
      with:
        script: |
          const fs = require('fs');
          
          // Try to read enhanced quality reports
          let report = {};
          let reportFound = false;
          
          // First try the enhanced validation results
          try {
            const reportData = fs.readFileSync('validation_results/documentation_quality_report.json', 'utf8');
            report = JSON.parse(reportData);
            reportFound = true;
          } catch (error) {
            // Fallback to legacy quality report
            try {
              const reportData = fs.readFileSync('quality_report.json', 'utf8');
              report = JSON.parse(reportData);
              reportFound = true;
            } catch (fallbackError) {
              console.log('No quality reports found');
            }
          }
          
          if (!reportFound) {
            const comment = `## ‚ö†Ô∏è Documentation Quality Report
            
            **Status**: Report generation failed
            
            The documentation quality check completed but no report was generated.
            Please check the workflow logs for details.
            
            üìã Raw workflow logs are available in the Actions tab.
            `;
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            return;
          }
          
          // Format enhanced comment
          const summary = report.summary || {};
          const passed = summary.passed_gates || 0;
          const total = summary.total_gates || 0;
          const errors = summary.total_errors || 0;
          const warnings = summary.total_warnings || 0;
          const validationStage = report.validation_stage || {};
          
          const emoji = passed === total ? '‚úÖ' : '‚ùå';
          
          const comment = `## ${emoji} Enhanced Documentation Quality Report
          
          **Quality Gates**: ${passed}/${total} passed
          **Issues Found**: ${errors} errors, ${warnings} warnings
          
          ### Quality Gate Results:
          ${Object.entries(report.detailed_results || {}).map(([gate, result]) => {
            const status = result.passed ? '‚úÖ' : '‚ùå';
            const errorCount = (result.errors || []).length;
            const warningCount = (result.warnings || []).length;
            return `- ${status} **${gate.replace('_', ' ').toUpperCase()}**: ${errorCount} errors, ${warningCount} warnings`;
          }).join('\n')}
          
          ${validationStage.stage_name ? `
          ### Multi-Stage Pipeline Integration:
          - **Validation Stage**: ${validationStage.stage_name}
          - **Stage Status**: ${validationStage.passed ? '‚úÖ Passed' : '‚ùå Failed'}
          - **Stage Issues**: ${(validationStage.issues || []).length}
          ` : ''}
          
          ### Quality Score:
          üìä **Overall Score**: ${report.quality_score || 'N/A'}/100
          
          ${errors > 0 ? '\n‚ö†Ô∏è **Action Required**: Please fix the errors before merging.' : ''}
          ${warnings > 0 ? '\nüí° **Recommendations**: Consider addressing the warnings for improved documentation quality.' : ''}
          ${passed === total && errors === 0 ? '\nüéâ **Excellent!** All quality gates passed with no errors.' : ''}
          
          üìã **Detailed Reports**: Available in workflow artifacts
          `;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # Fast Markdown Validation for Push Events
  quick-markdown-check:
    runs-on: ubuntu-latest
    name: Quick Markdown Validation
    if: github.event_name == 'push'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'  # Updated to Node 20 LTS
        
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install tools
      run: |
        # Install modern markdownlint
        npm install -g markdownlint-cli2
        
        # Install Python for auto-fix scripts
        python -m pip install --upgrade pip
        
    - name: Run quick markdownlint check
      id: markdownlint
      run: |
        echo "üîç Running quick markdown validation..."
        
        if [ -f .markdownlint.json ]; then
          echo "Using project markdownlint configuration"
          markdownlint-cli2 "docs/**/*.md" "*.md" --config .markdownlint.json || echo "MARKDOWN_ISSUES=true" >> $GITHUB_ENV
        else
          echo "Using default markdownlint configuration"
          markdownlint-cli2 "docs/**/*.md" "*.md" || echo "MARKDOWN_ISSUES=true" >> $GITHUB_ENV
        fi
        
    - name: Auto-fix markdown issues
      if: env.MARKDOWN_ISSUES == 'true'
      run: |
        echo "üîß Attempting to auto-fix markdown issues..."
        
        # Check if auto-fix script exists
        if [ -f "scripts/fix_markdown_lint.py" ]; then
          python scripts/fix_markdown_lint.py || echo "‚ö†Ô∏è Auto-fix script completed with warnings"
        else
          echo "‚ö†Ô∏è Auto-fix script not found - skipping auto-fix"
        fi
        
    - name: Commit auto-fixes
      if: env.MARKDOWN_ISSUES == 'true'
      run: |
        echo "üìù Committing auto-fixes..."
        
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Check if there are changes to commit
        if [ -n "$(git status --porcelain)" ]; then
          git add -A
          git commit -m "docs: auto-fix markdown lint issues

          ü§ñ Automated fix applied by GitHub Actions
          - Fixed markdown formatting issues
          - Applied consistent style guidelines
          
          Generated with GitHub Actions bot"
          
          # Push changes
          git push || echo "‚ö†Ô∏è Failed to push auto-fixes - may need manual intervention"
          
          echo "‚úÖ Auto-fixes committed and pushed"
        else
          echo "‚ÑπÔ∏è No changes to commit after auto-fix attempt"
        fi
        
    - name: Re-run validation after fixes
      if: env.MARKDOWN_ISSUES == 'true'
      run: |
        echo "üîç Re-validating after auto-fixes..."
        
        if [ -f .markdownlint.json ]; then
          markdownlint-cli2 "docs/**/*.md" "*.md" --config .markdownlint.json && echo "‚úÖ All markdown issues resolved" || echo "‚ö†Ô∏è Some issues remain after auto-fix"
        else
          markdownlint-cli2 "docs/**/*.md" "*.md" && echo "‚úÖ All markdown issues resolved" || echo "‚ö†Ô∏è Some issues remain after auto-fix"
        fi